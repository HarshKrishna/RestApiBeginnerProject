package com.hk.rest.webservices.ui.controller;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.validation.Valid;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.hk.rest.webservices.ui.exceptions.UserServiceException;
import com.hk.rest.webservices.ui.model.request.UpdateUserDetailModel;
import com.hk.rest.webservices.ui.model.request.UserDetailsRequest;
import com.hk.rest.webservices.ui.model.response.UserRest;
import com.hk.rest.webservices.userservice.impl.UserServiceImpl;

@RestController
@RequestMapping("users")
public class UserController {
//	@GetMapping
//    public String getUser(){
//        return "get user was called ";
//    }

	Map<String, UserRest> users;

	@GetMapping(produces = { MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE })
	public ResponseEntity<UserRest> getUser(@RequestParam(value = "page", defaultValue = "1") int page,
			@RequestParam(value = "limit", defaultValue = "50") int limit) {
//		return "get user was called with request parameter page = " + page + " and limit = " + limit;
		UserRest returnUser = new UserRest();
		returnUser.setUserId("3256");
		returnUser.setFirstName("Harsh");
		returnUser.setLastName("Krishna");
		returnUser.setEmail("hk@rest.com");
		returnUser.setAddress("Gaya");
		return new ResponseEntity<UserRest>(returnUser, HttpStatus.BAD_REQUEST);
	}

	@GetMapping(path = "/{userId}")
	public ResponseEntity<UserRest> getUser(@PathVariable String userId) {
		boolean check = false;
		if(check == false) {
			throw new UserServiceException("A User Service Exception was encountered");
		}
		else {			
			if (users.containsKey(userId)) {
				return new ResponseEntity<UserRest>(users.get(userId), HttpStatus.OK);
			} else {
				return new ResponseEntity<UserRest>(HttpStatus.NO_CONTENT);
			}
		}

	}

	@GetMapping(path = "/{userId}/{userName}")
	public String getUser(@PathVariable String userId, @PathVariable String userName) {
		return "get user was called with userId = " + userId + " userName : " + userName;
	}

	@PostMapping(consumes = { MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE }, produces = {
			MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE })
	public ResponseEntity<UserRest> createuser(@Valid @RequestBody UserDetailsRequest userDetails) {

		UserServiceImpl returnUser = new UserServiceImpl();
		
		
		return new ResponseEntity<UserRest>(returnUser.createUser(userDetails), HttpStatus.OK);
	}

	@PutMapping(path ="/{userId}", consumes = { MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE }, produces = {
			MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE })
	public UserRest updateUser(@PathVariable String userId, @Valid @RequestBody UpdateUserDetailModel updateUser) {
		
		UserRest storedUserDetails = users.get(userId);
		storedUserDetails.setFirstName(updateUser.getFirstName());
		storedUserDetails.setLastName(updateUser.getLastName());
		storedUserDetails.setEmail(updateUser.getEmail());
		
		users.put(userId, storedUserDetails);
		
		return storedUserDetails;
	}

	@DeleteMapping(path ="/{userId}")
	public String deleteUser(@PathVariable String userId) {
		
		String message;
		if(users.containsKey(userId)) {
			users.remove(userId);
			message = "User " + userId + " has been deleted";
		}
		else {
			message = "User not found";
		}
			
		return message;
	}

}
